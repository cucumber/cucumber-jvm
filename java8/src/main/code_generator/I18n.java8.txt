package cucumber.api.java8;

import cucumber.runtime.java.LambdaGlueRegistry;
import cucumber.runtime.java8.Java8StepDefinition;
import cucumber.runtime.java8.LambdaGlueBase;

public interface ${className} extends LambdaGlueBase {
<% i18n.stepKeywords.findAll { !it.contains('*') && !it.matches("^\\d.*") }.sort().unique().each { kw -> %>
    default void ${java.text.Normalizer.normalize(kw.replaceAll("[\\s',!]", ""), java.text.Normalizer.Form.NFC)}(final String regexp, final StepdefBody.A0 body) {
        LambdaGlueRegistry.INSTANCE.get().addStepDefinition(
            new Java8StepDefinition(regexp, 0, StepdefBody.A0.class, body)
        );
    }

    default void ${java.text.Normalizer.normalize(kw.replaceAll("[\\s',!]", ""), java.text.Normalizer.Form.NFC)}(final String regexp, final long timeoutMillis, final StepdefBody.A0 body) {
        LambdaGlueRegistry.INSTANCE.get().addStepDefinition(
            new Java8StepDefinition(regexp, timeoutMillis, StepdefBody.A0.class, body)
        );
    }
    <% (1..9).each { arity ->
      def ts = (1..arity).collect { n -> "T"+n }
      def genericSignature = ts.join(",") %>

    default <${genericSignature}> void ${java.text.Normalizer.normalize(kw.replaceAll("[\\s',!]", ""), java.text.Normalizer.Form.NFC)}(final String regexp, final StepdefBody.A${arity}<${genericSignature}> body) {
        LambdaGlueRegistry.INSTANCE.get().addStepDefinition(
            new Java8StepDefinition(regexp, 0, StepdefBody.A${arity}.class, body)
        );

    }

    default <${genericSignature}> void ${java.text.Normalizer.normalize(kw.replaceAll("[\\s',!]", ""), java.text.Normalizer.Form.NFC)}(final String regexp, final long timeoutMillis, final StepdefBody.A${arity}<${genericSignature}> body) {
        LambdaGlueRegistry.INSTANCE.get().addStepDefinition(
            new Java8StepDefinition(regexp, timeoutMillis, StepdefBody.A${arity}.class, body)
        );
    }
    <% } %>
<% } %>
}
